spring:
  profiles:
    active: local-dev
    default: local-dev
  data:
    redis:
      url: redis://redis-svc:6379
      client-type: lettuce
      database: 1
      client-name: gateway-svc
  config:
    import:
      - "optional:local-dev.yaml"
      - "optional:unit-test.yaml"
      - "optional:demo.yaml"
      - "optional:integration-test.yaml"
      - "optional:pre-proc.yaml"
      - "optional:proc.yaml "
  application:
    name: gateway-svc
  security:
   oauth2:
     resourceserver:
       jwt:
         authorities-claim-name: "roles"
         authority-prefix: "ROLE_"
         jwk-set-uri: http://auth-svc:8001/api/v1/auth/oauth2/jwks
  cloud:
    gateway:
      routes:
        - id: auth-svc
          uri: http://auth-svc:8001
          predicates:
            - Path=/api/v1/auth/**
#          filters:
#            - name: CircuitBreaker
#              args:
#                name: auth-service-breaker
#                fallbackUri: forward:/fallback/auth-svc
        - id: user-svc
          uri: http://user-svc:8002
          predicates:
            - Path=/api/v1/user/**
#          filters:
#            - name: RequestRateLimiter
#              args:
#                redis-rate-limiter.replenishRate: 1
#                redis-rate-limiter.burstCapacity: 1
#                redis-rate-limiter.requestedTokens: 1
#            - name: Retry
#              args:
#                method: GET
#                backoff:
#                  firstBackoff: 100ms
#                  maxBackoff: 1000ms
#                  factor: 2
#            - name: CircuitBreaker
#              args:
#                name: user-service-breaker
#                fallbackUri: forward:/fallback

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"
  level:
    com.github.ngodat0103.yamp.gateway: DEBUG
    org.springframework.security: DEBUG
server:
  port: 80
  forward-headers-strategy: framework
management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
