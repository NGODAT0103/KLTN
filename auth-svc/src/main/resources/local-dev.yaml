spring:
  kafka:
    bootstrap-servers: kafka-svc:9092

    consumer:
      group-id: auth-svc
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  cloud:

    inetutils:
      default-hostname: "yamp-backend.local"
  config:
    activate:
      on-profile: local-dev
  datasource:
    url: jdbc:postgresql://share-db:5432/auth-svc-db
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
    properties:
      hibernate.hibernate.format_sql: true
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
  data:
    redis:
      url: redis://redis-svc:6379
      client-name: auth-service
  security:
    oauth2:
      client:
        provider:
          auth-service-external:
            authorization-uri: http://${spring.cloud.inetutils.default-hostname}:8000/api/v1/auth/oauth2/authorize
            token-uri: http://${spring.cloud.inetutils.default-hostname}:8000/api/v1/auth/oauth2/token
            jwk-set-uri: http://${spring.cloud.inetutils.default-hostname}:8000/api/v1/auth/oauth2/jwks
      authorizationserver:
        issuer: http://${spring.cloud.inetutils.default-hostname}:8000/api/v1/auth


management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
logging:
  level:
    com.github.ngodat0103.yamp.authsvc.service: DEBUG
    com.github.ngodat0103.yamp.authsvc.controller: DEBUG
    org.springframework.security: DEBUG