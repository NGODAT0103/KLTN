name: ci-push-workflow
on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        description: "name of the service to trigger the CI"
        required: true
        type: string
      SERVICE_PORT:
        description: "port of the service to trigger the CI"
        required: true
        type: string
jobs:
  unit-test:
    name: Run Unit test
    runs-on: ubuntu-latest
    container:
      image: maven:3.9.8-eclipse-temurin-17-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: set up cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-v1-
      - name: Running test
        working-directory: ${{inputs.SERVICE_NAME}}
        run: mvn test -Dtest=*UnitTest
      - name: Create summary
        working-directory: ${{inputs.SERVICE_NAME}}/target/surefire-reports
        run: |
         echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
         echo "All unit tests have been executed." >> $GITHUB_STEP_SUMMARY
         echo "- **Service Name**: ${{ inputs.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
         echo "- **Service Port**: ${{ inputs.SERVICE_PORT }}" >> $GITHUB_STEP_SUMMARY
         cat $(ls | grep unit_test | grep .txt) >> $GITHUB_STEP_SUMMARY

  scan_quality_code:
    needs: [unit-test]
    name: Scan quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Cache SonarQube packages
        uses: actions/cache@v4.0.2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4.0.2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-v1-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-v1-
      - name: Build and analyze
        working-directory: ${{inputs.SERVICE_NAME}}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -DskipTests -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=NGODAT0103_KLTN_469d6be5-1cc8-4567-ae29-7f3f9dc29ff6 -Dsonar.projectName='KLTN'

  scan_vulnerability:
    needs: [scan_quality_code]
    name: check vulnerability using trivy
    runs-on: ubuntu-latest
    env:
      TRIVY_USERNAME: ${{github.repository_owner}}
      TRIVY_PASSWORD: ${{github.token}}
      CACHE_DIR: ~/.trivy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Trivy Cache
        uses: yogeshlonkar/trivy-cache-action@v0.1.6
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.53.0_Linux-64bit.deb
      - name: Scan file system
        working-directory: ${{inputs.SERVICE_NAME}}
        run: trivy --cache-dir=$CACHE_DIR fs --exit-code 1 --severity HIGH,CRITICAL .
      - name: Scan configuration
        working-directory: ${{inputs.SERVICE_NAME}}
        run: trivy --cache-dir=$CACHE_DIR fs --scanners misconfig --exit-code 1 --severity HIGH,CRITICAL .