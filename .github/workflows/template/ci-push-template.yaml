name: ci-push-workflow
on:
  workflow_call:
    inputs:
      SERVICE_NAME:
        description: "name of the service to trigger the CI"
        required: true
        type: string
      SERVICE_PORT:
        description: "port of the service to trigger the CI"
        required: true
        type: string
jobs:
  test:
    name: Run Unit test
    runs-on: ubuntu-latest
    container:
      image: maven:3.9.8-eclipse-temurin-17-alpine
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: set up cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Running test
        working-directory: ${{inputs.SERVICE_NAME}}
        run: mvn test -Dtest="**.unit_test.**"
      - name: Create summary
        run: |
         cd target/surefire-reports
         echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
         echo "All unit tests have been executed." >> $GITHUB_STEP_SUMMARY
         echo "- **Service Name**: ${{ inputs.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
         echo "- **Service Port**: ${{ inputs.SERVICE_PORT }}" >> $GITHUB_STEP_SUMMARY
         cat $(ls | grep unit_test | grep .txt) >> $GITHUB_STEP_SUMMARY

#  scan_quality_code:
#    name: Scan quality
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4.2.1
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#      - name: Cache SonarQube packages
#        uses: actions/cache@v4.0.2
#        with:
#          path: ~/.sonar/cache
#          key: ${{ runner.os }}-sonar
#          restore-keys: ${{ runner.os }}-sonar
#      - name: Cache Maven packages
#        uses: actions/cache@v4.0.2
#        with:
#          path: ~/.m2
#          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-m2
#      - name: Build and analyze
#        working-directory: ${{inputs.SERVICE_NAME}}
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
#        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=NGODAT0103_KLTN_469d6be5-1cc8-4567-ae29-7f3f9dc29ff6 -Dsonar.projectName='KLTN'

#  scan_security:
#    name: Security check using
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 1
#      - name: snyk setup
#        uses: snyk/actions/setup@master
#      - name: java set up
#        uses: actions/setup-java@v4.2.1
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#      - name: snky test
#        working-directory: ${{inputs.SERVICE_NAME}}
#        env:
#          SNYK_TOKEN: ${{secrets.SNYK_TOKEN}}
#        run: |
#          chmod +x ./mvnw
#          snyk test

#  scan_vulnerability:
#    name: check vulnerability using trivy
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: set up cache
#        uses: actions/cache@v4.0.2
#        with:
#          path: ~/.cache/trivy
#          key: ${{ runner.os }}-trivy
#      - name: set up trivy
#        run: |
#          wget https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.deb
#          sudo dpkg -i trivy_0.53.0_Linux-64bit.deb
#      - name: trivy scan
#        working-directory: ${{inputs.SERVICE_NAME}}
#        env:
#          TRIVY_USERNAME: ${{github.repository_owner}}
#          TRIVY_PASSWORD: ${{github.token}}
#        run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .
#  scan_misconfig:
#    name: check misconfiguration
#    runs-on: ubuntu-latest
#    needs: test
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#      - name: set up cache trivy
#        uses: actions/cache@v4.0.2
#        with:
#          path: ~/.cache/trivy
#          key: ${{ runner.os }}-trivy
#      - name: set up trivy
#        run: |
#          wget https://github.com/aquasecurity/trivy/releases/download/v0.53.0/trivy_0.53.0_Linux-64bit.deb
#          sudo dpkg -i trivy_0.53.0_Linux-64bit.deb
#      - name: trivy scan
#        working-directory: ${{inputs.SERVICE_NAME}}
#        env:
#          TRIVY_USERNAME: ${{github.repository_owner}}
#          TRIVY_PASSWORD: ${{secrets.GITHUB_TOKEN}}
#        run: trivy fs --scanners misconfig --exit-code 1 --severity HIGH,CRITICAL .
